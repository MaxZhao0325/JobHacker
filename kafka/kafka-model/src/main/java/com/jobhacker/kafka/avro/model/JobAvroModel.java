/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jobhacker.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class JobAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7102131527416080737L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JobAvroModel\",\"namespace\":\"com.jobhacker.kafka.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"companyName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"role\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"location\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"link\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"postedAt\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<JobAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<JobAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<JobAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<JobAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<JobAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this JobAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a JobAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a JobAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static JobAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String companyName;
  private java.lang.String role;
  private java.lang.String location;
  private java.lang.String link;
  private java.lang.String postedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public JobAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param companyName The new value for companyName
   * @param role The new value for role
   * @param location The new value for location
   * @param link The new value for link
   * @param postedAt The new value for postedAt
   */
  public JobAvroModel(java.lang.String id, java.lang.String companyName, java.lang.String role, java.lang.String location, java.lang.String link, java.lang.String postedAt) {
    this.id = id;
    this.companyName = companyName;
    this.role = role;
    this.location = location;
    this.link = link;
    this.postedAt = postedAt;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return companyName;
    case 2: return role;
    case 3: return location;
    case 4: return link;
    case 5: return postedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: companyName = value$ != null ? value$.toString() : null; break;
    case 2: role = value$ != null ? value$.toString() : null; break;
    case 3: location = value$ != null ? value$.toString() : null; break;
    case 4: link = value$ != null ? value$.toString() : null; break;
    case 5: postedAt = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'companyName' field.
   * @return The value of the 'companyName' field.
   */
  public java.lang.String getCompanyName() {
    return companyName;
  }


  /**
   * Sets the value of the 'companyName' field.
   * @param value the value to set.
   */
  public void setCompanyName(java.lang.String value) {
    this.companyName = value;
  }

  /**
   * Gets the value of the 'role' field.
   * @return The value of the 'role' field.
   */
  public java.lang.String getRole() {
    return role;
  }


  /**
   * Sets the value of the 'role' field.
   * @param value the value to set.
   */
  public void setRole(java.lang.String value) {
    this.role = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public java.lang.String getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(java.lang.String value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'link' field.
   * @return The value of the 'link' field.
   */
  public java.lang.String getLink() {
    return link;
  }


  /**
   * Sets the value of the 'link' field.
   * @param value the value to set.
   */
  public void setLink(java.lang.String value) {
    this.link = value;
  }

  /**
   * Gets the value of the 'postedAt' field.
   * @return The value of the 'postedAt' field.
   */
  public java.lang.String getPostedAt() {
    return postedAt;
  }


  /**
   * Sets the value of the 'postedAt' field.
   * @param value the value to set.
   */
  public void setPostedAt(java.lang.String value) {
    this.postedAt = value;
  }

  /**
   * Creates a new JobAvroModel RecordBuilder.
   * @return A new JobAvroModel RecordBuilder
   */
  public static com.jobhacker.kafka.avro.model.JobAvroModel.Builder newBuilder() {
    return new com.jobhacker.kafka.avro.model.JobAvroModel.Builder();
  }

  /**
   * Creates a new JobAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new JobAvroModel RecordBuilder
   */
  public static com.jobhacker.kafka.avro.model.JobAvroModel.Builder newBuilder(com.jobhacker.kafka.avro.model.JobAvroModel.Builder other) {
    if (other == null) {
      return new com.jobhacker.kafka.avro.model.JobAvroModel.Builder();
    } else {
      return new com.jobhacker.kafka.avro.model.JobAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new JobAvroModel RecordBuilder by copying an existing JobAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new JobAvroModel RecordBuilder
   */
  public static com.jobhacker.kafka.avro.model.JobAvroModel.Builder newBuilder(com.jobhacker.kafka.avro.model.JobAvroModel other) {
    if (other == null) {
      return new com.jobhacker.kafka.avro.model.JobAvroModel.Builder();
    } else {
      return new com.jobhacker.kafka.avro.model.JobAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for JobAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JobAvroModel>
    implements org.apache.avro.data.RecordBuilder<JobAvroModel> {

    private java.lang.String id;
    private java.lang.String companyName;
    private java.lang.String role;
    private java.lang.String location;
    private java.lang.String link;
    private java.lang.String postedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jobhacker.kafka.avro.model.JobAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.companyName)) {
        this.companyName = data().deepCopy(fields()[1].schema(), other.companyName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.location)) {
        this.location = data().deepCopy(fields()[3].schema(), other.location);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.link)) {
        this.link = data().deepCopy(fields()[4].schema(), other.link);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.postedAt)) {
        this.postedAt = data().deepCopy(fields()[5].schema(), other.postedAt);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing JobAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jobhacker.kafka.avro.model.JobAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.companyName)) {
        this.companyName = data().deepCopy(fields()[1].schema(), other.companyName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.location)) {
        this.location = data().deepCopy(fields()[3].schema(), other.location);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.link)) {
        this.link = data().deepCopy(fields()[4].schema(), other.link);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.postedAt)) {
        this.postedAt = data().deepCopy(fields()[5].schema(), other.postedAt);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'companyName' field.
      * @return The value.
      */
    public java.lang.String getCompanyName() {
      return companyName;
    }


    /**
      * Sets the value of the 'companyName' field.
      * @param value The value of 'companyName'.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder setCompanyName(java.lang.String value) {
      validate(fields()[1], value);
      this.companyName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'companyName' field has been set.
      * @return True if the 'companyName' field has been set, false otherwise.
      */
    public boolean hasCompanyName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'companyName' field.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder clearCompanyName() {
      companyName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'role' field.
      * @return The value.
      */
    public java.lang.String getRole() {
      return role;
    }


    /**
      * Sets the value of the 'role' field.
      * @param value The value of 'role'.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder setRole(java.lang.String value) {
      validate(fields()[2], value);
      this.role = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'role' field has been set.
      * @return True if the 'role' field has been set, false otherwise.
      */
    public boolean hasRole() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'role' field.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder clearRole() {
      role = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public java.lang.String getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder setLocation(java.lang.String value) {
      validate(fields()[3], value);
      this.location = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder clearLocation() {
      location = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'link' field.
      * @return The value.
      */
    public java.lang.String getLink() {
      return link;
    }


    /**
      * Sets the value of the 'link' field.
      * @param value The value of 'link'.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder setLink(java.lang.String value) {
      validate(fields()[4], value);
      this.link = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'link' field has been set.
      * @return True if the 'link' field has been set, false otherwise.
      */
    public boolean hasLink() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'link' field.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder clearLink() {
      link = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'postedAt' field.
      * @return The value.
      */
    public java.lang.String getPostedAt() {
      return postedAt;
    }


    /**
      * Sets the value of the 'postedAt' field.
      * @param value The value of 'postedAt'.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder setPostedAt(java.lang.String value) {
      validate(fields()[5], value);
      this.postedAt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'postedAt' field has been set.
      * @return True if the 'postedAt' field has been set, false otherwise.
      */
    public boolean hasPostedAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'postedAt' field.
      * @return This builder.
      */
    public com.jobhacker.kafka.avro.model.JobAvroModel.Builder clearPostedAt() {
      postedAt = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public JobAvroModel build() {
      try {
        JobAvroModel record = new JobAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.companyName = fieldSetFlags()[1] ? this.companyName : (java.lang.String) defaultValue(fields()[1]);
        record.role = fieldSetFlags()[2] ? this.role : (java.lang.String) defaultValue(fields()[2]);
        record.location = fieldSetFlags()[3] ? this.location : (java.lang.String) defaultValue(fields()[3]);
        record.link = fieldSetFlags()[4] ? this.link : (java.lang.String) defaultValue(fields()[4]);
        record.postedAt = fieldSetFlags()[5] ? this.postedAt : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<JobAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<JobAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<JobAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<JobAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    if (this.companyName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.companyName);
    }

    if (this.role == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.role);
    }

    if (this.location == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.location);
    }

    if (this.link == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.link);
    }

    if (this.postedAt == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.postedAt);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.companyName = null;
      } else {
        this.companyName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.role = null;
      } else {
        this.role = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.location = null;
      } else {
        this.location = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.link = null;
      } else {
        this.link = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.postedAt = null;
      } else {
        this.postedAt = in.readString();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.companyName = null;
          } else {
            this.companyName = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.role = null;
          } else {
            this.role = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.location = null;
          } else {
            this.location = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.link = null;
          } else {
            this.link = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.postedAt = null;
          } else {
            this.postedAt = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










